*** Submission ***

+ No significant packaging/building issues.

- Some significant or persistent style issues noted by OnlineTA:

  - Warnings about non-exhaustive patterns in function definitions,
    `case`-expressions, etc. should normally be taken quite seriously.
    It's is generally preferable to explicitly cover "impossible" cases
    with an informative `error` message, e.g.
    `case l of [] -> error "unexpected empty list in Foo"; (h:t) -> ...`.

  - Heavy warnings about redundant brackets. While a few nominally
    redundant parentheses may be harmless or even helpful in specific
    circumstances, you should generally not add parentheses in cases
    where they are clearly unneeded, such as around individual
    variables and argument-less constructors: `(x)`, `([])`, `(True)`;
    around subexpressions inherently bracketed by the surrounding
    context: `if (x > 0) then ...`, `case (f x) of ...`; or around
    curried applications: `(f x y)`, unless that application is itself
    a function argument. They just clutter your code and make it
    harder to read.

+ You have included a timesheet. Good!

*** Warmup ***

+ All our tests pass. Good job!

+ Code looks OK

  = Some of your comments are rather odd.

*** Main task: code ***

+ showExp: fine

+ evalSimple: fine

  = You are not handling error-propagation in Pow as specified in the
    optional part. That's fine, as long as it's explicitly mentioned
    in the report.

+ extendEnv/evalFull: fine

  = You are evaluating `Sum`-expressions by dynamically building a new
    Exp and then immediately evaluating it. While this is not
    inherently wrong, it is somewhat redundant and needlessly
    complicated.  Consider whether/how you could express the same
    computation in a style were `eval` is only applied recursively to
    proper subexpressions of the original one.

+ evalErr: problems

  - You have a lot of nearly-identical boilerplate code for each
    of the binary operators. Consider how to reduce the duplication
    by abstracting out the common parts into a separate function
    or functions. (Monads will help with that!)

  - Last two parts (Let and Sum) are missing.

= Optional showCompact: not done - no problem
= Optional evalEager/evalLazy: not done - no problem

= General suggestions/comments:

  - Consider using (where easily possible) a consistent variable-naming
    convention (e.g., `e`, `e1`, `e'`, `ebody`, ... for expressions,
    `n`, `n1`, `nfrom`, ... for numbers, and so on). That makes
    your code much easier to read and maintain.

  - You seem to know a bit of OOP, and want to apply a "handler" pattern?
    Or perhaps, you read an article about effect handlers?

    In either case, the function `handler` is defined but not used.

  - You frequently recompute the results of function calls (e.g., in the
    pattern `if ...f x ... then ...f x... else ...`). Note that
    lazy evaluation will _not_ catch that, so if `f` is a complicated
    function, you will potentially do many redundant computations.
    Consider binding the result to an intermediate variable, as in
    `let y = f x in if ...y... then ...y... else ...`

*** Main task: testing ***

+ Tests are automated and runnable by `stack test`. Good!

  + Reasonably comprehensive.

  + Both positive and negative tests (where applicable). It's perfectly
    fine not to have automated tests for error conditions in
    evalSimple / evalFull, as long as you explicitly explain why not
    in the report.

== Main task: report ==

- Somewhat unsatisfactory discussion of design/implementation choices

  - No real discussion of lazy vs. eager let-bindings in evalSimple/evalFull
    vs. evalErr, even though this was specifically asked for in the
    assignment text.

  - Even though proper error-propagation in Pow was an optional feature,
    it's still good style to say explicitly whether you implemented
    it or not.

  = Consider enriching your report with an introductory section, where you
    explain the main design choices of your implementation.

*** Main task: assessment ***

+ You have divided the assessment up into the suggested categories. Good!

+ Completeness: fine

  = You didn't implement everything, but at least it's clear from
    your report what you did and didn't do,

+ Correctness: fine

  - You have some minor correctness issues, but you are very unclear about
    what they are in the report. Try to identified the problems clearly in
    the assessment.

- Efficiency: could have said more

  = You chose to implement the evaluation of Sum-expressions by
    separately evaluating the body for one of the bounds (upper or
    lower) and for the rest of of the interval, and finally adding up
    the results. This is a very natural thing to do in a functional
    language, and a perfectly acceptable solutions, but you should
    still be aware that, when summing over a large range (millions or
    even billions of values), such a deep recursion may cause you to
    use excessive amounts of stack space, which ideally should
    be mentioned in the report.

+ Maintainability: fine

*** Overall score: 2 / 6 ***

I think you did a great job, and I think you are very close to having
finished the code project. To solve the error propagation problem for `Pow`,
have a look at the function `seq` in the Haskell Prelude.

I have granted you a resubmission, and will extend your submission deadline
for assignment 1 until friday next week (30/09-2022). In order to pass, I
expect you to fix the last two cases of `evalErr`.

If you have any additional quesitions regarding the feedback, feel free to
send me an email.
